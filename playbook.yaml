---
- hosts: localhost
  name: create and run our tutorial application stacks
  
  tasks:
  - name: Create viewer docker image
    command: "docker build -t viewer -f {{ playbook_dir }}/viewer/viewer.dockerfile {{ playbook_dir }}/viewer"

  - name: Create creator docker image
    command: "docker build -t creator -f {{ playbook_dir }}/creator/creator.dockerfile {{ playbook_dir }}/creator"
  
  - name: Create corp docker image
    command: "docker build -t corp -f {{ playbook_dir }}/corp/corp.dockerfile {{ playbook_dir }}/corp"

  - name: Ensure docker network present
    docker_network:
      name: BeanNet
      state: present

  - name: Initialize MySQL database container for Corp
    docker_container:
      name: db
      image: mysql:5.7.22
      state: started
      networks:
        - name: BeanNet
      ports:
        - 3306
      env:
        MYSQL_ROOT_PASSWORD: password
        MYSQL_DATABASE: DockBeanBiz
      volumes:
        - "{{ playbook_dir }}/corp/db/initdb.d:/docker-entrypoint-initdb.d"
    register: db_meta

  - name: get mysql IP address
    command: "docker inspect --format '{''{ .NetworkSettings.IPAddress }''}' db"
    register: db_ip

  - name: Report DB IP for on-host access
    debug:
      msg: "Database running at {{ db_ip.stdout }}"

  - name: Wait for MySQL db to become available
    wait_for:
      host: "{{ db_ip.stdout }}"
      port: 3306
      state: started
      delay: 5
      connect_timeout: 15
      timeout: 30
    register: db_running
    until: db_running is success
    retries: 10

  - name: Start the corp service
    docker_container:
      name: corp
      image: corp
      restart_policy: always
      networks:
        - name: BeanNet
      ports:
        - "5000"
      volumes:
        - "{{ playbook_dir }}/corp/source:/srv/corp"
    register: corp

  - name: Initialize MongoDB database container
    docker_container:
      name: mongo
      image: mongo:4.1-xenial
      state: started
      networks:
        - name: BeanNet
      ports:
        - 27017
      env:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: example
    register: mongo_db

  - name: Start the viewer
    docker_container:
      name: viewer
      image: viewer
      restart_policy: always
      networks:
        - name: BeanNet
      ports:
        - "5000:5000"
      volumes:
        - "{{ playbook_dir }}/viewer:/srv/viewer"
    register: viewer

  - name: Start the creator
    docker_container:
      name: creator
      image: creator
      restart_policy: no
      networks:
        - name: BeanNet
      volumes:
        - "{{ playbook_dir }}/creator/source:/home/creator"
    register: creator